// 13 -- Walidacja i stylowanie HTML

// W tej lekcji o tym jak JSX poprawnie waliduje składnie HTML
// JSX nie traktuje kodu jak stronga czy zwyklego ciągu znaków
// ale wszystko odrazu przekształca na obiekty JS
// to dlatego tak trudno popełnić w nim bląd typowo syntaktyczny
// a nawet jesli już jakiś błą w konstrukcji uda nam się przemycić
// to sama przeglądaraka powinna od razu to wychwycić i nas o tym poinfomrmować 
// << 4 >> Z tym że o ile przeglądarka wiele błędów nam wybacza o tyle JSX juz nie
// i to bardzo dobrze bo od początku wymusza na nas pisanie poprawnego kodu

var data = {
    title: "Temat Kursu",
    description: "Opis kursu wykorzystujący tym razem zmienne w JSX...",
    image: "http://placehold.it/150x150x",
    author: "Testowy autor",
    duration: "6 godz",
    is_new: true, 
    is_promo: true 
}

var course = (
    <div className="media course">{/* << 8 >> */} 
        {/* <<1 >> course media column */}
        <div className="media-left">
            <img src= {data.image} alt="cover" />
        </div>

        {/* << 1 >> course content column */}
        <div className="media-body">
            <h3> {data.title} { data.is_new ? <span className="label label-default"> NOWY! </span> : null } </h3>  
            <p> {data.description}</p>
            {/* << 1 >>promotion */}
            {  data.is_promo ? <b> Kurs jest w PROMOCJI! </b> : <span> Nie jest w promocji! </span> }
        </div>

        {/* << 1 >> course details column */} 
        <div className="media-right">
            <table className="table course_details">{/* << 7 >> */}
                {/* << 2 >>  BŁĄD! (samo tr)*/}
                <tbody> 
                {/*<< 5 >> Bez błedu!*/}
                    <tr>
                        <th>Autor</th>
                        {/* << 9>> <td>Testowy autor</td> */}
                        <td>{data.author}</td>
                    </tr>
                    <tr>
                        <th>Czas trwania</th>
                        <td style={ {color:"green"} }>{data.duration}</td>{/* << 6 >> */}
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
)

ReactDOM.render(course, document.getElementById("root"));

/* 
    << 1 >> Tak więc dodamy sobie nową TABELE z dodatkopwymi informacjami odnośnie kursy
        i SPECJALNIE zrobimy w jej tworzeniu błąd żeby zobaczyć co się będzie dziać
    << 2 >> po odpaleniu kodu od razu dostajemy błąd 
                <tr> cannot appear as a child of <table>. 
                 Add a <tbody> to your code to match the DOM tree generated by the browser.
        Otóż specyfikacja HTML wymaga aby KAŻDA tebal miala <tbody> no i opcjinalnie <thdead><tfooter> !!!
        I teraz najlepsze! Jesli przekopiowalibysmy ten kod do czystecho plku HTML
        to przeglądarka SAMA, za naszymi plecami DODAŁABY SEKCJE <tbody> !!!
        I właśnie o tym jest mowa w naszym prowadzeniu 
    << 4 >> Dzieje się tak dlatego że React dziala na zasadzie ciągłego porównania nowego kodu z kodem poprzednim
        no i jak by my cały czas to tbody raz znikalo a raz sie pojawialo to by kurwa zdurniał
        Dlatego od razu wywala błąd żebyśmy nad tym zpanowali i pisali wszystko zgodnie ze sztuką
    << 5 >> po wstawieniu tbody błąd zniknął od razu
    << 6 >> Dodajemy WŁASNY STYL
        No i uwaga PRZYJŻYJ SIĘ TEJ KONSTRUKCJI !
            style={ {width:"250px"} }
        Podwójna klamra to nie jest nic nadzwyczajnego! {{}}
        pierwsza z nich to oczywiście zwykłe wstawienie JS do JSX
        a druga to już wewnątrz JS najzwyklejszy obiekt tyle ze bez nazwy !!!
        Gdybyś chciał dodać więcej właściwości no to po przecinku np.
            style={ {width:"250px", fontWeight="bold"} }

        ON to wyjebał później z tego kodu ze niby jako przykład ale ja to przenosze do <td>
            <td style={ {color:"green"} }>6h</td>
    << 7 >> to co robił poprzedni w << 6 >> przenosi do osobnego pliku CSS
        Mówi o tym żeby style pisane w REacie robić tylko do dynamicznych rzeczy
        Wszystkie inne oczywiście standardowo to osobnych plików i załączać
        tutaj dopisujemy klase "course_details"
    << 8 >> W CSS dodal klase nadrzedna "course" i tutaj ją dopisujemy - OK
    << 9 >> Przenosimy Autora i czas do zmiennej JS !   -  OK !

    PODSUMOWANIE:
    W zasadzie wiesz jusz wszystko najwazniejsze o JSX
        - jak elementy renderowac statycznie
        - jak dynamicznie wstawiac JS
        - jak korzystac ze styli
        - i o tym że struktura HTML musi byc prawidlowa, inaczej bedzie błąd

    W następnej kolejne możliwości JSX
*/